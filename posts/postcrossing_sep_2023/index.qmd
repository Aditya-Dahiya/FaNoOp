---
title: "Postcrossing by the Numbers: Discovering the Global Postcard Exchange"
author: "Aditya Dahiya"
date: "2023-09-29"
categories: [analysis]
image: "logo.png"
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
  error: false
  message: false
  warning: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/FaNoOp/posts/postcrossing_sep_2023/"
  description: "Postcrossing by the Numbers: Discovering the Global Postcard Exchange"
  twitter: true
  facebook: true
  linkedin: true
  email: true
---

Today, we're embarking on a journey through the captivating realm of [**Postcrossing.com**](https://www.postcrossing.com/) -- the global hub where postcards find their way to far-flung corners of the Earth.

Ever wondered who's behind those postcards, where they're coming from, and why some countries send more postcards than others? We're about to dive headfirst into a treasure trove of statistics that will reveal who the [*Postcrossing*](https://www.postcrossing.com/) *community* truly is.

### First, an overview of the World of postcards and post-crossers:

### **Percentage of country's population that uses [postcrossing.com](https://www.postcrossing.com/)**

```{=html}
<iframe title="" aria-label="Map" id="datawrapper-chart-UxjrO" src="https://datawrapper.dwcdn.net/UxjrO/1/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="294" data-external="1"></iframe><script type="text/javascript">!function(){"use strict";window.addEventListener("message",(function(a){if(void 0!==a.data["datawrapper-height"]){var e=document.querySelectorAll("iframe");for(var t in a.data["datawrapper-height"])for(var r=0;r<e.length;r++)if(e[r].contentWindow===a.source){var i=a.data["datawrapper-height"][t]+"px";e[r].style.height=i}}}))}(); </script>
```
### **Total Postcards Sent by people from each Country**

```{=html}
<iframe title="" aria-label="Map" id="datawrapper-chart-mxe0K" src="https://datawrapper.dwcdn.net/mxe0K/1/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="294" data-external="1"></iframe><script type="text/javascript">!function(){"use strict";window.addEventListener("message",(function(a){if(void 0!==a.data["datawrapper-height"]){var e=document.querySelectorAll("iframe");for(var t in a.data["datawrapper-height"])for(var r=0;r<e.length;r++)if(e[r].contentWindow===a.source){var i=a.data["datawrapper-height"][t]+"px";e[r].style.height=i}}}))}(); </script>
```
### **Average number of postcards sent by each member in a country**

```{=html}
<iframe title="" aria-label="Map" id="datawrapper-chart-rCTPQ" src="https://datawrapper.dwcdn.net/rCTPQ/1/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="294" data-external="1"></iframe><script type="text/javascript">!function(){"use strict";window.addEventListener("message",(function(a){if(void 0!==a.data["datawrapper-height"]){var e=document.querySelectorAll("iframe");for(var t in a.data["datawrapper-height"])for(var r=0;r<e.length;r++)if(e[r].contentWindow===a.source){var i=a.data["datawrapper-height"][t]+"px";e[r].style.height=i}}}))}(); </script>
```
```{r}
#| label: setup

library(tidyverse)
library(janitor)
library(gt)
library(gtExtras)
library(ggthemes)
library(scales)
library(corrplot)
```

```{r}
#| label: read data
#| output: false

# Data reading in
cps = read_csv("countries_postcrossing.csv") |>   
        clean_names() |>
        mutate(country_name = str_squish(country_name)) |>      
        mutate(code = if_else(country_name == "Namibia",
                              "NM",
                              code)) |>
        mutate(country_name = if_else(code == "KR", 
                                      "Korea South", 
                                      country_name)) |>
        mutate(country_name = case_when(
          country_name == "United States of America" ~ "United States",
          country_name == "Russia" ~ "Russian Federation",
          country_name == "Egypt" ~ "Egypt, Arab Rep.",
          country_name == "Virgin Islands" ~ "British Virgin Islands",
          country_name == "Korea South" ~ "Korea, Rep.",
          country_name == "Korea" ~ "Korea, Dem. People's Rep.",
          country_name == "Venezuela" ~ "Venezuela, RB",
          country_name == "Czech Republic" ~ "Czechia",
          country_name == "Hong Kong" ~ "Hong Kong SAR, China",
          country_name == "Kyrgyzstan" ~ "Kyrgyz Republic",
          country_name == "Macao" ~ "Macao SAR, China",
          country_name == "Bahamas" ~ "Bahamas, The",
          country_name == "Yemen" ~ "Yemen, Rep.",
          country_name == "TÃ¼rkiye" ~ "Turkiye",
          country_name == "Iran" ~ "Iran, Islamic Rep.",
          country_name == "Slovakia" ~ "Slovak Republic",
          .default = country_name
        ))
wb_countries = read_csv("countries_data_from_world_bank.csv", 
    col_types = cols(Value_2022 = col_double()))

# Create a df to read the full names of the indicators
ind_names_df = wb_countries |> 
  distinct(`Indicator Name`, `Indicator Code`)

# Vector with full names and clean abbreviations of vectors
ind_names_vec = ind_names_df |>
  pivot_wider(names_from = `Indicator Code`,
              values_from = `Indicator Name`) |>
  clean_names() |>
  as_vector()

# Wide format world bank data
wb_countries = wb_countries |>
  clean_names() |>
  select(-indicator_name, -country_code) |>
  pivot_wider(id_cols = country_name,
              names_from = indicator_code,
              values_from = value_2022) |>
  clean_names()

# Join the data of cps and wb_countries
df = inner_join(cps, wb_countries, by = join_by("country_name")) |>
  mutate(
    prop_members = members/sp_pop_totl,
    postcard_per_mem = postcards_sent/members,
    pop_check = pc_pop_estimate/sp_pop_totl
  ) |>
  relocate(c(sp_pop_totl,
             prop_members,
             postcard_per_mem),
           .before = sp_pop_grow) |>
  relocate(pc_pop_estimate, 
           .before = pop_check) |>
  select(-code)

wb_regression_vars = read_csv("wb_regression_vars.csv", 
                               col_types = cols(`2022 [YR2022]` = col_number())) |>
  janitor::clean_names()

reg_vars = wb_regression_vars |>
  distinct(series_name, series_code) |>
  drop_na() |>
  mutate(series_code = snakecase::to_snake_case(series_code)) |>
  mutate(series_code = ifelse(series_code == "sp_pop_65_up_to_zs",
                              "sp_pop_65up_to_zs",
                              series_code))

reg_vars_df = wb_regression_vars |>
  drop_na() |>
  select(-series_name, -country_code) |>
  pivot_wider(id_cols = country_name,
              names_from = series_code,
              values_from = x2022_yr2022) |>
  clean_names()

df_reg = inner_join(df, reg_vars_df,
           by = join_by(country_name)) |>
  select(-c(se_adt_litr_zs, se_prm_cmpt_zs))


reg_vars = bind_rows(
  reg_vars,
  ind_names_df |>
    clean_names() |>
    mutate(indicator_code = snakecase::to_snake_case(indicator_code)) |>
    rename(series_name = indicator_name,
           series_code = indicator_code)
)

```

```{r}
#| label: checks_in_the_code_working
#| eval: false
#| echo: false
#| output: false

# Result
wb_countries
cps
dftemp = df$country_name

# Check the left out countries from World Bank
wb_countries |>
  filter(!(country_name %in% dftemp)) |>
  arrange(desc(sp_pop_totl))

#  Check the left out countries from cps
cps |>
  filter(!(country_name %in% dftemp)) |>
  arrange(desc(postcards_sent))

# Check the ratio of population in postcrossing dataset vs. World Bank dataset
df |>
  select(country_name, pop_check, sp_pop_totl, pc_pop_estimate) |>
  filter(pop_check < 0.1 | pop_check > 1.1)
```

### The complete data on the postcards sent by Postcrossers across the globe:

```{r}
#| label: max-postcards-per-member

df |>
  filter(members >= 100) |>
  arrange(desc(postcard_per_mem)) |>
  select(country_name,
         members,
         postcards_sent,
         sp_pop_totl, 
         prop_members,
         postcard_per_mem) |>
  gt() |>
  fmt_number(columns = c(sp_pop_totl,
                         members,
                         postcards_sent),
             decimals = 0) |>
  fmt_percent(columns = prop_members) |>
  fmt_number(columns = postcard_per_mem,
             decimals = 1) |>
  cols_align(align = "center",
             columns = c(prop_members,
                         postcard_per_mem)) |>
  cols_label(
    sp_pop_totl ~ "total_population",
    postcard_per_mem ~ "postcards_per_member",
    prop_members ~ "percentage_poulation_postcrossing"
  ) |>
   cols_label_with(
    fn = ~ janitor::make_clean_names(., case = "title")
  ) |>
  opt_interactive(use_search = TRUE,
                  use_highlight = TRUE,
                  use_compact_mode = TRUE,
                  use_page_size_select = TRUE,
                  page_size_default = 5) |>
  tab_source_note(source_note = md(
    "Data from the _Postcrossing.com_ and the World Bank **DataBank**."
  ))
```

As we can see, postcrossing is most popular in European countries: --

```{r}
#| label: tbl-max-members-percentage
#| tbl-cap-location: top
#| tbl-cap: "Countries with highest postcrossing popularity - most members as percentage of population"

df |>
  filter(members >= 100) |>
  arrange(desc(prop_members)) |>
  slice_head(n = 5) |>
  select(country_name,
         members,
         postcards_sent,
         sp_pop_totl, 
         prop_members) |>
  gt() |>
  fmt_number(columns = c(sp_pop_totl,
                         members,
                         postcards_sent),
             decimals = 0) |>
  fmt_percent(columns = prop_members) |>
  cols_align(align = "center",
             columns = c(prop_members)) |>
  cols_label(
    sp_pop_totl ~ "total_population",
    prop_members ~ "percentage_poulation_postcrossing"
  ) |>
   cols_label_with(
    fn = ~ janitor::make_clean_names(., case = "title")
  ) |>
  gt_theme_538() |>
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(columns = prop_members)
  )
```

## Germans have sent the most postcards

```{r}
#| label: max-postcards-sent

df |>
  select(country_name,
         postcards_sent) |>
  arrange(desc(postcards_sent)) |>
  slice_head(n = 10) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, postcards_sent),
             x = postcards_sent,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Number of postcards sent (in millions)",
       y = NULL,
       title = NULL,
       subtitle = "Postcards sent from Germany are more than combined postcards from all countries except the top 15") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2")
```

### A closer look at Germany vs. other top postcrossing nations.

While Germany doesn't have the maximum number of members on postcrossing, it makes up by sending more postcards on average, per member.

```{r}
#| label: max-members

x1 = df |>
  select(country_name,
         members) |>
  arrange(desc(members)) |>
  slice_head(n = 10) |>
  mutate(col_cn = country_name == "Germany")

x2 = df |>
  filter(members >= 100) |>
  select(country_name,
         members,
         postcard_per_mem) |>
  arrange(desc(members)) |>
  slice_head(n = 10) |>
  mutate(postcard_per_mem = round(postcard_per_mem, 1))  

inner_join(x1, x2) |>
  arrange(desc(members)) |>
  rename(
    "Postcrossing members (in thousands)" = members,
    "Average postcards sent (per member)" = postcard_per_mem
  ) |>
  rownames_to_column(var = "reorder_pc") |>
  pivot_longer(cols = -c(country_name, col_cn, reorder_pc), 
               names_to = "names_pc",
               values_to = "value_pc") |>
  mutate(
    reorder_pc = as.numeric(reorder_pc),
    country_name = fct_reorder(country_name, desc(reorder_pc))
  ) |>
  ggplot(aes(y = country_name,
             x = value_pc,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = NULL,
       y = NULL) +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2") +
  facet_wrap(~ fct(names_pc, 
                   levels = c("Postcrossing members (in thousands)",
                              "Average postcards sent (per member)")), 
             scales = "free_x",
             strip.position = "top") +
    theme(strip.text.x = element_text(size = 12))

```

```{r}
#| label: STOP-max-postcards-per-person-all-countries
#| output: false
#| eval: false
#| echo: false

df |>
  filter(members >= 100) |>
  select(country_name,
         postcard_per_mem) |>
  arrange(desc(postcard_per_mem)) |>
  slice_head(n = 10) |>
  mutate(postcard_per_mem = round(postcard_per_mem, 0)) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, postcard_per_mem),
             x = postcard_per_mem,
             fill = col_cn,
             label = postcard_per_mem)) +
  geom_bar(stat = "identity") +
  geom_text(hjust = -0.5,
            size = 3) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Average postcards sent (per member)",
       y = NULL,
       title = "But, Luxembourgers and Finns send ever more postcards, on average!",
       subtitle = "Here's the highest number of average per person postcards") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2")
```

In fact, the following countries have higher percentage of their population registered as members on postcrossing. But, Germans make up for that by a combination of more postcard sent per person and a larger population.

```{r}
#| label: prop-population-as-members
#| fig-asp: 0.5

df |>
  filter(members >= 100) |>
  select(country_name,
         prop_members) |>
  arrange(desc(prop_members)) |>
  slice_head(n = 12) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, prop_members),
             x = prop_members*100,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Percentage of population that uses postcrossing (%)",
       y = NULL) +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Accent")
```

## Do the elderly send more postcards?

When we look at the relation of postcards sent per member to the ageing of population in countries, we find: --

-   Countries with more elderly population also send more postcards, on average

-   Coutnries with higher proportion of young people in the population send fewer postcards per member, on average.

```{r}
#| label: relation-of-age-distribution-with-postcards-sent
#| fig-width: 10

labels_pop = ind_names_df[c(7, 6), ] |>
  clean_names() |>
  select(indicator_name) |>
  as_vector() |>
  unname()

names(labels_pop) = ind_names_df[c(7, 6), ] |>
  clean_names() |>
  mutate(indicator_code = snakecase::to_snake_case(indicator_code)) |>
  select(indicator_code) |>
  as_vector() |>
  unname()

names(labels_pop)[2] = "sp_pop_65up_to_zs"

df |> 
  filter(members >= 50) |>
  select(country_name, postcard_per_mem, 
         sp_pop_0014_to_zs, sp_pop_65up_to_zs) |>
  pivot_longer(cols = -c(country_name, postcard_per_mem),
               names_to = "indicator",
               values_to = "value") |>
  ggplot(aes(x = value,
             y = postcard_per_mem,
             label = country_name)) +
  geom_smooth(col = "lightgrey", 
              alpha = 0.2,
              se = FALSE,
              lwd = 2) +
  geom_point(size = 0.8, 
             alpha = 0.75) +
  theme_classic() +
  ggrepel::geom_text_repel(size = 2) +
  labs(y = "Average no. of postcards sent per member", 
       x = NULL) +
  facet_wrap(~ indicator,
             scales = "free_x",
             strip.position = "bottom",
             labeller = labeller(indicator = labels_pop)) +
  theme(plot.title.position = "plot")
```

### And, we take a closer look at the top 100 postcrossers - of all time and of last 60 days: --

```{r}
#| label: postcrossers-top-100
#| fig-asp: 0.5

pc_rk_usr = read_csv("ranked_users_all_time.csv") |>
  clean_names() |>
  mutate(
    username = str_remove(username, pattern = "\xa0"),
    country  = str_remove(country,  pattern = "\xa0")
  )
pc_rk_usr_60 = read_csv("ranked_users_last_60_days.csv") |>
  clean_names() |>
  select(-x2) |>
  mutate(
    username = str_remove(username, pattern = "\xa0"),
    country  = str_remove(country,  pattern = "\xa0")
  )

pc_rk_usr |>
  group_by(country) |>
  summarise(
    nos = n(),
    postcards_sent = sum(postcards_sent)
  ) |>
  filter(nos >= 3) |>
  mutate(col_cn = case_when(
    country == "U.S.A." ~ "A",
    country == "Germany" ~ "B",
    .default = "C"
  )) |>
  ggplot(aes(y = reorder(country, nos),
             x = nos,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(x = "Number of people in top 100 postcrossers of all time",
       y = NULL,
       title = "Germany has most amongst top 100 postcrossers of all time") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.title.position = "plot",
        legend.position = "none") +
  scale_fill_brewer(palette = "Set1")

pc_rk_usr_60 |>
  group_by(country) |>
  summarise(
    nos = n(),
    postcards_sent = sum(postcards_sent_in_last_60_days)
  ) |>
  filter(nos >= 2) |>
  mutate(col_cn = case_when(
    country == "U.S.A." ~ "A",
    country == "Germany" ~ "B",
    .default = "C"
  )) |>
  ggplot(aes(y = reorder(country, nos),
             x = nos,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(x = "Number of people in top 100 postcrossers of all time",
       y = NULL,
       title = "But, in last 60 days, USA has the most amongst top 100 postcrossers of all time") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.title.position = "plot",
        legend.position = "none") +
  scale_fill_brewer(palette = "Set1")
```

Looking closely at the *postcrossers* who figure both in the **Top 100 of all time** and **Top 100 of last 60 days,** we find that in the top 100, Americans are rising in ranks lately. Amongst users who figure in both the all time top 100 and last 60 days lists of top 100, Americans have moved up and Germans have fallen in ranks.

```{r}
#| label: change-of-ranks-in-top-100-alltime-60days
#| fig-asp: 1.2
#| fig-width: 7

top_usr_60 = pc_rk_usr_60$username %in% pc_rk_usr$username
top_usr = pc_rk_usr$username %in% pc_rk_usr_60$username

top_users = inner_join(
  pc_rk_usr_60 |>
  filter(top_usr_60) |>
  arrange(rank),
  
  pc_rk_usr |>
  filter(top_usr) |>
  arrange(rank),
  
  by = join_by("username")
  ) |>
  rename(
  rank_last_60_days = rank.x,
  rank_all_time = rank.y,
  country = country.x 
  ) |>
  select(-country.y)

top_users |>
  select(-c(postcards_sent_in_last_60_days, postcards_sent)) |>
  pivot_longer(
    cols = -c(username, country),
    names_to = "which_rank",
    values_to = "rank"
  ) |>
  mutate(which_rank = fct(which_rank,
                          levels = c(
                            "rank_all_time",
                            "rank_last_60_days"
                          ))) |>
  mutate(col_cn = case_when(
    country == "Germany" ~ "A",
    country == "U.S.A." ~ "B",
    .default = "C"
  )) |>
  ggplot(aes(x = which_rank,
             y = rank,
             label = paste0(rank, ".", country),
             group = username,
             col = col_cn)) +
  geom_line(alpha = 0.5, linetype = 2) +
  geom_label(
    nudge_x = 0,
    nudge_y = -0.1,
    label.padding = unit(0.15, "lines"),
    label.r = unit(0.25, "lines"),
    label.size = 0.15,
    size = 3) +
  theme_minimal() +
  coord_cartesian(ylim = c(40, 1)) +
  scale_y_continuous(breaks = c(40, 30, 20, 10, 1)) +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "none",
        panel.grid = element_blank(),
        axis.text.y = element_blank()) +
  labs(x = NULL, 
       y = NULL) +
  scale_x_discrete(labels = c(
    "Ranks - All Time",
    "Ranks - in the last 60 days"
  ))
```

### Finally, let's delve into other indicators that could explain why some countries send more postcards than others !

We use the following variables as predictors in our model to predict the Average number of postcards sent by a member in each country: --

-   Age dependency ratio, old (% of working-age population),

-   Population ages 65 and above (% of total population),

-   Population ages 0-14 (% of total population),

-   GDP per capita (current US\$)

When we analyze the predictors, the results are shown in @tbl-regression-1 . It seems that only the GDP per capita correlates with the Average number of postcards sent by a member in each country. Being elderly or young has no correlation with the Average number of postcards sent.

```{r}
#| label: tb-regression-1
#| results: asis

reg1 = df_reg |>
  select(postcard_per_mem, 
         sp_pop_65up_to_zs.x,
         sp_pop_0014_to_zs.x,
         sp_pop_dpnd_ol,
         ny_gdp_pcap_cd,
         ny_gdp_pcap_pp_cd) |>
  drop_na() |>
  filter(postcard_per_mem <= 10000000) |>
  rename(
    "sp_pop_65up_to_zs" = "sp_pop_65up_to_zs.x",
    "sp_pop_0014_to_zs" = "sp_pop_0014_to_zs.x"
  )

model1_vars = reg_vars |>
  filter(series_code %in% 
           c("sp_pop_65up_to_zs",
             "sp_pop_0014_to_zs",
             "sp_pop_dpnd_ol",
             "ny_gdp_pcap_cd")) |>
  arrange(desc(series_code))
  
indvars_model1 = model1_vars |>
            select(series_code) |>
            as_vector() |>
            unname()

f1 = paste0("postcard_per_mem ~ ", 
            indvars_model1)
f1all = paste0("postcard_per_mem ~ ", 
               str_flatten(
                 indvars_model1,
                 collapse = " + "
               ))
covar1_label = model1_vars |>
  select(series_name) |>
  as_vector() |>
  unname()

fit1 = lm(f1[1], data = reg1)
fit2 = lm(f1[2], data = reg1)
fit3 = lm(f1[3], data = reg1)
fit4 = lm(f1[4] , data = reg1)
fit5 = lm(postcard_per_mem ~ sp_pop_0014_to_zs + ny_gdp_pcap_cd, data = reg1)
fit6 = lm(postcard_per_mem ~ sp_pop_65up_to_zs + ny_gdp_pcap_cd, data = reg1)
fit7 = lm(postcard_per_mem ~ sp_pop_dpnd_ol + ny_gdp_pcap_cd, data = reg1)
fit8 = lm(f1all, data = reg1)

stargazer::stargazer(fit1, fit2, fit3, fit4,
                     fit5, fit6, fit7, fit8,
                     title = "Regression results",
                     column.separate = c(4,3,1),
                     column.labels = c("Bi-variable models", "Two variables", "All vars"),
                     dep.var.labels.include = FALSE,
                     df = FALSE,
                     digits = 1,
                     font.size = "small",
                     keep.stat = c("f", "adj.rsq"),
                     omit = c("Constant"),
                     covariate.labels = covar1_label,
                     dep.var.caption = "Average number of postcards sent by each member",
                     type = ifelse(knitr::is_latex_output(),"latex", "html")
                     )
```

Now, lets try to see what could explain the different number of members in different countries, i.e. Percentage of the population that is registered on [postcrossing.com](www.postcrossing.com). We see that the most important predictor of postcrossing member's proportion in a population is the share of elderly population. Also, we see the fast growing populations have lower postcrossing members.

All is strongly indicates that postcrossing members' numbers is primarily correlated with an elderly population which is slow growing.

```{r}
#| label: tbl-regression-2
#| results: asis

# A vector to dcide which covariates and the dependent variable to select
reg2_vars = names(df_reg)[c(5, 4, 7, 9, 17, 18)]

# Create regression usable df
reg2_df = df_reg |>
  select(reg2_vars) |>
  drop_na() |>
  rename("sp_pop_65up_to_zs" = "sp_pop_65up_to_zs.x")

# Tibble for names of covariates
indvars_model2 = reg_vars |>
  filter(series_code %in% names(reg2_df)) |>
  arrange(series_code)

# Formulas for single covariate models
f2 = paste0("prop_members ~ ", 
            indvars_model2$series_code)
f2all = paste0("prop_members ~ ", 
               str_flatten(
                 indvars_model2$series_code,
                 collapse = " + "
               ))

# Labels vector for stargazer
covar2_label = indvars_model2 |>
  select(series_name) |>
  as_vector() |>
  unname()

# Regression models
fit1 = lm(f2[1], data = reg2_df)
fit2 = lm(f2[2], data = reg2_df)
fit3 = lm(f2[3], data = reg2_df)
fit4 = lm(f2[4], data = reg2_df)
fit5 = lm(f2[5], data = reg2_df)
fit6 = lm("prop_members ~ ny_gdp_pcap_cd + sp_pop_65up_to_zs", data = reg2_df)
fit7 = lm("prop_members ~ ny_gdp_pcap_cd + sp_pop_grow", data = reg2_df)
fit2all = lm(f2all, data = reg2_df)

stargazer::stargazer(fit1, fit2, fit3, fit4,
                     fit5, fit6, fit7, fit2all,
                     title = "Regression results",
                     column.separate = c(5,2,1),
                     column.labels = c("One covariate models", 
                                       "Two Covariates", 
                                       "All covariates"),
                     dep.var.labels.include = FALSE,
                     df = FALSE,
                     font.size = "small",
                     keep.stat = c("f", "adj.rsq"),
                     omit = c("Constant"),
                     covariate.labels = covar2_label,
                     dep.var.caption = "Postcrossing members as a proportion of population",
                     type = ifelse(knitr::is_latex_output(),"latex", "html")
                     )

```
