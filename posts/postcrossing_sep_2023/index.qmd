---
title: "Postcrossing by the Numbers: Discovering the Global Postcard Exchange"
author: "Aditya Dahiya"
date: "2023-09-24"
categories: [analysis]
image: "logo.png"
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
  error: false
  message: false
  warning: false
---

Hey there, data explorers and globe-trotters of knowledge! Welcome to another exciting expedition into the world of data on *FaNoOp*. Today, we're embarking on a journey through the captivating realm of [**Postcrossing.com**](https://www.postcrossing.com/) -- the global hub where postcards find their way to far-flung corners of the Earth.

Ever wondered who's behind those postcards, where they're coming from, and what tales they carry? We're about to dive headfirst into a treasure trove of statistics that will reveal who the *Postcrossing community* truly is.

```{r}
#| label: setup

library(tidyverse)
library(janitor)
library(gt)
library(gtExtras)
library(ggthemes)
```

```{r}
#| label: read data
#| output: false

# Data reading in
cps = read_csv("countries_postcrossing.csv") |>   
        clean_names() |>
        mutate(country_name = str_squish(country_name)) |>      
        mutate(code = if_else(country_name == "Namibia",
                              "NM",
                              code)) |>
        mutate(country_name = if_else(code == "KR", 
                                      "Korea South", 
                                      country_name)) |>
        mutate(country_name = case_when(
          country_name == "United States of America" ~ "United States",
          country_name == "Russia" ~ "Russian Federation",
          country_name == "Egypt" ~ "Egypt, Arab Rep.",
          country_name == "Virgin Islands" ~ "British Virgin Islands",
          country_name == "Korea South" ~ "Korea, Rep.",
          country_name == "Korea" ~ "Korea, Dem. People's Rep.",
          country_name == "Venezuela" ~ "Venezuela, RB",
          country_name == "Czech Republic" ~ "Czechia",
          country_name == "Hong Kong" ~ "Hong Kong SAR, China",
          country_name == "Kyrgyzstan" ~ "Kyrgyz Republic",
          country_name == "Macao" ~ "Macao SAR, China",
          country_name == "Bahamas" ~ "Bahamas, The",
          country_name == "Yemen" ~ "Yemen, Rep.",
          country_name == "TÃ¼rkiye" ~ "Turkiye",
          country_name == "Iran" ~ "Iran, Islamic Rep.",
          country_name == "Slovakia" ~ "Slovak Republic",
          .default = country_name
        ))
wb_countries = read_csv("countries_data_from_world_bank.csv", 
    col_types = cols(Value_2022 = col_double()))

# Create a df to read the full names of the indicators
ind_names_df = wb_countries |> 
  distinct(`Indicator Name`, `Indicator Code`)

# Vector with full names and clean abbreviations of vectors
ind_names_vec = ind_names_df |>
  pivot_wider(names_from = `Indicator Code`,
              values_from = `Indicator Name`) |>
  clean_names() |>
  as_vector()

# Wide format world bank data
wb_countries = wb_countries |>
  clean_names() |>
  select(-indicator_name, -country_code) |>
  pivot_wider(id_cols = country_name,
              names_from = indicator_code,
              values_from = value_2022) |>
  clean_names()

# Join the data of cps and wb_countries
df = inner_join(cps, wb_countries, by = join_by("country_name")) |>
  mutate(
    prop_members = members/sp_pop_totl,
    postcard_per_mem = postcards_sent/members,
    pop_check = pc_pop_estimate/sp_pop_totl
  ) |>
  relocate(c(sp_pop_totl,
             prop_members,
             postcard_per_mem),
           .before = sp_pop_grow) |>
  relocate(pc_pop_estimate, 
           .before = pop_check) |>
  select(-code)
```

```{r}
#| label: checks_in_the_code_working
#| eval: false
#| echo: false
#| output: false

# Result
wb_countries
cps
dftemp = df$country_name

# Check the left out countries from World Bank
wb_countries |>
  filter(!(country_name %in% dftemp)) |>
  arrange(desc(sp_pop_totl))

#  Check the left out countries from cps
cps |>
  filter(!(country_name %in% dftemp)) |>
  arrange(desc(postcards_sent))

# Check the ratio of population in postcrossing dataset vs. World Bank dataset
df |>
  select(country_name, pop_check, sp_pop_totl, pc_pop_estimate) |>
  filter(pop_check < 0.1 | pop_check > 1.1)
```

```{r}
#| label: tbl-max-postcards-per-member
#| tbl-cap-location: top
#| tbl-cap: "Countries with maximum postcards sent by each member"

df |>
  filter(members >= 100) |>
  arrange(desc(postcard_per_mem)) |>
  select(country_name,
         members,
         postcards_sent,
         sp_pop_totl, 
         prop_members,
         postcard_per_mem) |>
  gt() |>
  fmt_number(columns = c(sp_pop_totl,
                         members,
                         postcards_sent),
             decimals = 0) |>
  fmt_percent(columns = prop_members) |>
  fmt_number(columns = postcard_per_mem,
             decimals = 1) |>
  cols_align(align = "center",
             columns = c(prop_members,
                         postcard_per_mem)) |>
  cols_label(
    sp_pop_totl ~ "total_population",
    postcard_per_mem ~ "postcards_per_member",
    prop_members ~ "percentage_poulation_postcrossing"
  ) |>
   cols_label_with(
    fn = ~ janitor::make_clean_names(., case = "title")
  ) |>
  gt_theme_538() |>
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(columns = postcard_per_mem)
  )
```

```{r}
#| label: tbl-max-members-percentage
#| tbl-cap-location: top
#| tbl-cap: "Countries with highest postcrossing popularity - most members as percentage of population"

df |>
  filter(members >= 100) |>
  arrange(desc(prop_members)) |>
  slice_head(n = 5) |>
  select(country_name,
         members,
         postcards_sent,
         sp_pop_totl, 
         prop_members) |>
  gt() |>
  fmt_number(columns = c(sp_pop_totl,
                         members,
                         postcards_sent),
             decimals = 0) |>
  fmt_percent(columns = prop_members) |>
  cols_align(align = "center",
             columns = c(prop_members)) |>
  cols_label(
    sp_pop_totl ~ "total_population",
    prop_members ~ "percentage_poulation_postcrossing"
  ) |>
   cols_label_with(
    fn = ~ janitor::make_clean_names(., case = "title")
  ) |>
  gt_theme_538() |>
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(columns = prop_members)
  )
```

```{r}
#| label: max-postcards-sent

df |>
  select(country_name,
         postcards_sent) |>
  arrange(desc(postcards_sent)) |>
  slice_head(n = 10) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, postcards_sent),
             x = postcards_sent,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Number of postcards sent (in millions)",
       y = NULL,
       title = "Germany has sent the most postcards",
       subtitle = "Postcards sent from Germany are more than combined postcards from all countries except the top 15") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2")
```

```{r}
#| label: max-members


df |>
  select(country_name,
         members) |>
  arrange(desc(members)) |>
  slice_head(n = 10) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, members),
             x = members,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Postcrossing members (in thousands)",
       y = NULL,
       title = "But, Germany doesn't have the most members on postcrossing!",
       subtitle = "Russia, US and China have members exceeding that of Germany") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2")
```

```{r}
#| label: postcards-per-member
df |>
  filter(members >= 100) |>
  select(country_name,
         members,
         postcard_per_mem) |>
  arrange(desc(members)) |>
  slice_head(n = 10) |>
  mutate(postcard_per_mem = round(postcard_per_mem, 0)) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, members),
             x = postcard_per_mem,
             fill = col_cn,
             label = postcard_per_mem)) +
  geom_bar(stat = "identity") +
  geom_text(hjust = -0.5,
            size = 3) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Average postcards sent (per member)",
       y = NULL,
       title = "However, Germans make up for that by sending more postcards on average!",
       subtitle = "amongst the top 10 countries, in terms of members.") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6,
                     limits = c(0, 250)) +
  scale_fill_brewer(palette = "Set2")
```

```{r}
#| label: max-postcards-per-person-all-countries

df |>
  filter(members >= 100) |>
  select(country_name,
         postcard_per_mem) |>
  arrange(desc(postcard_per_mem)) |>
  slice_head(n = 10) |>
  mutate(postcard_per_mem = round(postcard_per_mem, 0)) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, postcard_per_mem),
             x = postcard_per_mem,
             fill = col_cn,
             label = postcard_per_mem)) +
  geom_bar(stat = "identity") +
  geom_text(hjust = -0.5,
            size = 3) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Average postcards sent (per member)",
       y = NULL,
       title = "But, Luxembourgers and Finns send ever more postcards, on average!",
       subtitle = "Here's the highest number of average per person postcards") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2")
```

```{r}
#| label: prop-population-as-members

df |>
  filter(members >= 100) |>
  select(country_name,
         prop_members) |>
  arrange(desc(prop_members)) |>
  slice_head(n = 12) |>
  mutate(col_cn = country_name == "Germany") |>
  ggplot(aes(y = reorder(country_name, prop_members),
             x = prop_members*100,
             fill = col_cn)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none",
        plot.title.position = "plot") +
  labs(x = "Percentage of population that uses postcrossing (%)",
       y = NULL,
       title = "But, Germany does benefit in total numbers from its relatively large population.",
       subtitle = "These 11 countries have higher percentage of their population as postcrossing members") +
  scale_x_continuous(labels = scales::label_number_si(),
                     n.breaks = 6) +
  scale_fill_brewer(palette = "Set2")
```

```{r}
#| eval: false
#| output: false

world = map_data("world")

mapdf = left_join(world, df, 
                  by = join_by("region" == "country_name"))
names(mapdf)
ggplot() + 
  geom_map(data = mapdf,
           map = mapdf,
           mapping = aes(x = long,
                         y = lat,
                         map_id = region,
                         fill = prop_members))
```
